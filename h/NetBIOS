/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
*
*  NETBIOS.H  -- Header for NetBIOS functions
*
*  14-02-94 INH  Original
*  11-10-94      Revamped, new name management
*  18-12-95	 NB_Init now does most network startup.
*  25-04-96	 Now uses function pointers to allow IP/NetBEUI switch
*/

/* Basic types & structures --------------------------- */

typedef void *hNAME;     /* NetBIOS name handle */
typedef void *hSESSION;  /* NetBIOS session handle */

/* ---------- */

typedef enum
{
  ntSERVER   = 0x20,
  ntMACHINE  = 0x00,
  ntUSER     = 0x03,
  ntFORWD    = 0x05,
  ntPRIMARYDC= 0x1B,
  ntMBROWSER = 0x1D,
  ntELECTION = 0x1E
}
  nametype_t;

#define ANY_NAME_TYPE   (-1)

/* ---------- */

typedef union
{
  int   c4 [4];
  BYTE  b[16];
}
  NETNAME;

/* ---------- */

struct FindName_res
{
  NETNAME    name;
  nametype_t type;
  char       flags;
#define FN_GROUPNAME 0x80
};

/* Structure containing all transport type declarations ---------- */

/* We have one transport protocol (IP) after the removal of NetBEUI.
   The function calls are called directly. In the future, we may
   want to add redirection to support QUIC transport for SMB 3.1.1,
   but that will require refactoring the code to support multiple
   simultaneous active transports. Leave the NetBIOS machine name
   handle in the NETBIOS_TRANSPORT struct (I'll add DNS name later). */

struct NETBIOS_TRANSPORT
{
  hNAME	hMachineName;   /* NetBIOS name handle, or NULL */

#ifndef NO_NETBEUI
  err_t	(*pfnStartup) (void);
  void	(*pfnShutdown) (void);
  err_t	(*pfnFormatName) ( nametype_t nt, char *name, NETNAME *pnn );
  nametype_t (*pfnDecodeName) ( NETNAME *pnn, char *buf);
  bool  (*pfnMatchName) ( NETNAME *pnn1, NETNAME *pnn2 );
  err_t (*pfnAddLocalName) ( nametype_t nt, char *name, hNAME *phName );
  err_t (*pfnRemoveLocalName) ( hNAME hName );
  err_t (*pfnOpenSession) ( hNAME hLocalName, NETNAME *pnnFarEnd,
                              hSESSION *phSession );
  err_t (*pfnSendData) ( hSESSION hS, BUFCHAIN Data );
#ifdef SMB1_OLD_RAW_MODE
  err_t (*pfnSendBlockData) ( hSESSION hS, BYTE *where, uint datalen );
#endif
  err_t (*pfnClearRxQueue) ( hSESSION hS );
  err_t (*pfnGetData) ( hSESSION hS, BUFCHAIN *pOutData, int timeout );
#ifdef SMB1_OLD_RAW_MODE
  err_t (*pfnGetBlockData) ( hSESSION hS, BYTE *where, uint *len_in_out,
                                                  int timeout );
#endif
  bool  (*pfnLinkOK) ( hSESSION hS );
  err_t (*pfnCloseSession) ( hSESSION hS );
  int   (*pfnFindNames) ( NETNAME *pnnFind,
                          nametype_t ntFind,
                          struct FindName_res *pResults,
                          int results_max,
                          int timeout );
  char * (*pfnDescribeLink) ( hSESSION hS );
  void   (*pfnInternetGone) ( void );
  void   (*pfnInternetInit) ( void );
#endif
};

/* Definitions for supplied transports ------------------------- */

extern struct NETBIOS_TRANSPORT *NB_ActiveTransport;

/* Call this setup function to initialise the NB_ActiveTransport struct. */

extern void NB_NBIP_Setup(void);


/* Macro definitions ----------------- */

#define NB_MachineName		(NB_ActiveTransport->hMachineName)

#ifdef NO_NETBEUI

extern err_t _NB_Startup(void);
extern void _NB_Shutdown(void);

extern err_t _NB_FormatName ( nametype_t nt, char *name, NETNAME *res );
extern nametype_t _NB_DecodeName ( NETNAME *pnn, char *buf );
extern bool _NB_MatchName ( NETNAME *nn1, NETNAME *nn2 );
extern err_t _NB_AddLocalName ( nametype_t nt, char *name, hNAME *phName );
extern err_t _NB_RemoveLocalName ( hNAME hName );
extern int _NB_FindNames ( NETNAME *pnnFind, nametype_t ntFind,
                           struct FindName_res *pResults, int results_max,
                           int timeout );

extern err_t _NB_OpenSession ( hNAME hLocalName, NETNAME *pnnFarEnd,
                               hSESSION *phSession );
extern err_t _NB_CloseSession ( hSESSION hS );
extern char * _NB_DescribeLink ( hSESSION hS );
extern bool _NB_LinkOK ( hSESSION hS );

extern err_t _NB_SendData ( hSESSION hS, BUFCHAIN Data );
extern err_t _NB_ClearRxQueue ( hSESSION hS );
extern err_t _NB_GetData ( hSESSION hS, BUFCHAIN *pOutData, int timeout );

extern void _NB_InternetGone(void);
extern void _NB_InternetInit(void);

#ifdef SMB1_OLD_RAW_MODE
extern err_t _NB_SendBlockData ( hSESSION hS, BYTE *where, uint datalen );
extern err_t _NB_GetBlockData ( hSESSION hS, BYTE *where, uint *len_in_out,
                                int timeout );
#endif

#define NB_Startup()                (_NB_Startup ())
#define NB_Shutdown()               (_NB_Shutdown ())

#define NB_FormatName(a, b, c)      (_NB_FormatName (a, b, c))
#define NB_DecodeName(a, b)         (_NB_DecodeName (a, b))
#define NB_MatchName(a, b)          (_NB_MatchName (a, b))
#define NB_AddLocalName(a, b, c)    (_NB_AddLocalName (a, b, c))
#define NB_RemoveLocalName(a)       (_NB_RemoveLocalName (a))
#define NB_FindNames(a, b, c, d, e) (_NB_FindNames (a, b, c, d, e))

#define NB_OpenSession(a, b, c)     (_NB_OpenSession (a, b, c))
#define NB_CloseSession(a)          (_NB_CloseSession (a))
#define NB_DescribeLink(a)          (_NB_DescribeLink (a))
#define NB_LinkOK(a)                (_NB_LinkOK (a))

#define NB_SendData(a, b)           (_NB_SendData (a, b))
#define NB_ClearRxQueue(a)          (_NB_ClearRxQueue (a))
#define NB_GetData(a, b, c)         (_NB_GetData (a, b, c))

#define NB_InternetGone()           (_NB_InternetGone ())
#define NB_InternetInit()           (_NB_InternetInit ())

#ifdef SMB1_OLD_RAW_MODE
#define NB_SendBlockData(a, b, c)   (_NB_SendBlockData (a, b, c))
#define NB_GetBlockData(a, b, c, d) (_NB_GetBlockData (a, b, c, d))
#endif

#else

#define NB_Startup()		(NB_ActiveTransport->pfnStartup())
#define NB_Shutdown()		(NB_ActiveTransport->pfnShutdown())
#define NB_FormatName(a,b,c)	(NB_ActiveTransport->pfnFormatName(a,b,c))
#define NB_DecodeName(a,b)	(NB_ActiveTransport->pfnDecodeName(a,b))

#define NB_MatchName(a,b)	(NB_ActiveTransport->pfnMatchName(a,b))
#define NB_AddLocalName(a,b,c)	(NB_ActiveTransport->pfnAddLocalName(a,b,c))
#define NB_RemoveLocalName(a)	(NB_ActiveTransport->pfnRemoveLocalName(a))
#define NB_OpenSession(a,b,c)	(NB_ActiveTransport->pfnOpenSession(a,b,c))
#define NB_SendData(a,b)	(NB_ActiveTransport->pfnSendData(a,b))

#ifdef SMB1_OLD_RAW_MODE
#define NB_SendBlockData(a,b,c) (NB_ActiveTransport->pfnSendBlockData(a,b,c))
#endif
#define NB_ClearRxQueue(a)	(NB_ActiveTransport->pfnClearRxQueue(a))
#define NB_GetData(a,b,c)	(NB_ActiveTransport->pfnGetData(a,b,c))
#ifdef SMB1_OLD_RAW_MODE
#define NB_GetBlockData(a,b,c,d) (NB_ActiveTransport->pfnGetBlockData(a,b,c,d))
#endif
#define NB_LinkOK(a)		(NB_ActiveTransport->pfnLinkOK(a))

#define NB_CloseSession(a)	(NB_ActiveTransport->pfnCloseSession(a))
#define NB_FindNames(a,b,c,d,e)	(NB_ActiveTransport->pfnFindNames(a,b,c,d,e))
#define NB_DescribeLink(a)	(NB_ActiveTransport->pfnDescribeLink(a))

#define NB_InternetGone(a)	(NB_ActiveTransport->pfnInternetGone(a))
#define NB_InternetInit(a)	(NB_ActiveTransport->pfnInternetInit(a))

#endif /* NO_NETBEUI */
